//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectServiceClient.DiffFilesInterfaceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiffFilesInterfaceRef.IDiffFilesInterface")]
    public interface IDiffFilesInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetter", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterResponse")]
        int compareFileLetterByLetter(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetter", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterResponse")]
        System.Threading.Tasks.Task<int> compareFileLetterByLetterAsync(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileWordByWord", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileWordByWordResponse")]
        System.Collections.Generic.Dictionary<int, string> compareFileWordByWord(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileWordByWord", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileWordByWordResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> compareFileWordByWordAsync(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterAndCalculateProba" +
            "bility", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterAndCalculateProba" +
            "bilityResponse")]
        double compareFileLetterByLetterAndCalculateProbability(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterAndCalculateProba" +
            "bility", ReplyAction="http://tempuri.org/IDiffFilesInterface/compareFileLetterByLetterAndCalculateProba" +
            "bilityResponse")]
        System.Threading.Tasks.Task<double> compareFileLetterByLetterAndCalculateProbabilityAsync(string firstFileName, string secondFileName, int pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/percentCalculate", ReplyAction="http://tempuri.org/IDiffFilesInterface/percentCalculateResponse")]
        double percentCalculate(double howManyTheSameLetters, double firstFileLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/percentCalculate", ReplyAction="http://tempuri.org/IDiffFilesInterface/percentCalculateResponse")]
        System.Threading.Tasks.Task<double> percentCalculateAsync(double howManyTheSameLetters, double firstFileLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/getTheSameElementsPosSecondFile", ReplyAction="http://tempuri.org/IDiffFilesInterface/getTheSameElementsPosSecondFileResponse")]
        System.Collections.Generic.Dictionary<int, string> getTheSameElementsPosSecondFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/getTheSameElementsPosSecondFile", ReplyAction="http://tempuri.org/IDiffFilesInterface/getTheSameElementsPosSecondFileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getTheSameElementsPosSecondFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/clearTheSameElementsPosSecondFile", ReplyAction="http://tempuri.org/IDiffFilesInterface/clearTheSameElementsPosSecondFileResponse")]
        void clearTheSameElementsPosSecondFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiffFilesInterface/clearTheSameElementsPosSecondFile", ReplyAction="http://tempuri.org/IDiffFilesInterface/clearTheSameElementsPosSecondFileResponse")]
        System.Threading.Tasks.Task clearTheSameElementsPosSecondFileAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiffFilesInterfaceChannel : ProjectServiceClient.DiffFilesInterfaceRef.IDiffFilesInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiffFilesInterfaceClient : System.ServiceModel.ClientBase<ProjectServiceClient.DiffFilesInterfaceRef.IDiffFilesInterface>, ProjectServiceClient.DiffFilesInterfaceRef.IDiffFilesInterface {
        
        public DiffFilesInterfaceClient() {
        }
        
        public DiffFilesInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiffFilesInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiffFilesInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiffFilesInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int compareFileLetterByLetter(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileLetterByLetter(firstFileName, secondFileName, pattern);
        }
        
        public System.Threading.Tasks.Task<int> compareFileLetterByLetterAsync(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileLetterByLetterAsync(firstFileName, secondFileName, pattern);
        }
        
        public System.Collections.Generic.Dictionary<int, string> compareFileWordByWord(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileWordByWord(firstFileName, secondFileName, pattern);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> compareFileWordByWordAsync(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileWordByWordAsync(firstFileName, secondFileName, pattern);
        }
        
        public double compareFileLetterByLetterAndCalculateProbability(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileLetterByLetterAndCalculateProbability(firstFileName, secondFileName, pattern);
        }
        
        public System.Threading.Tasks.Task<double> compareFileLetterByLetterAndCalculateProbabilityAsync(string firstFileName, string secondFileName, int pattern) {
            return base.Channel.compareFileLetterByLetterAndCalculateProbabilityAsync(firstFileName, secondFileName, pattern);
        }
        
        public double percentCalculate(double howManyTheSameLetters, double firstFileLength) {
            return base.Channel.percentCalculate(howManyTheSameLetters, firstFileLength);
        }
        
        public System.Threading.Tasks.Task<double> percentCalculateAsync(double howManyTheSameLetters, double firstFileLength) {
            return base.Channel.percentCalculateAsync(howManyTheSameLetters, firstFileLength);
        }
        
        public System.Collections.Generic.Dictionary<int, string> getTheSameElementsPosSecondFile() {
            return base.Channel.getTheSameElementsPosSecondFile();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> getTheSameElementsPosSecondFileAsync() {
            return base.Channel.getTheSameElementsPosSecondFileAsync();
        }
        
        public void clearTheSameElementsPosSecondFile() {
            base.Channel.clearTheSameElementsPosSecondFile();
        }
        
        public System.Threading.Tasks.Task clearTheSameElementsPosSecondFileAsync() {
            return base.Channel.clearTheSameElementsPosSecondFileAsync();
        }
    }
}
